--> Install Python locally
--> If you want to code in Visual studio then install "phython" and " runners" extensions.

--> Python Basic syntax:-

    -->Python Identifiers :
            - A Python identifier is a name used to identify a variable, function, class, module or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).
            - Python does not allow punctuation characters such as &commat;, $, and % within identifiers.
            - Python Class names start with an uppercase letter. All other identifiers start with a lowercase letter.
            - Starting an identifier with a single leading underscore indicates that the identifier is private identifier.

            -Starting an identifier with two leading underscores indicates a strongly private identifier.

            - If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.

    --> Python Reserved Words:
          - there are some reserverd keywords which cant be used as constant or variable or any other identifier names.
          - All the Python keywords contain lowercase letters only
          - and,as,assert,break,class,continue,def,del,elif,else,except,False,finally,for,from

    --> Python Lines and Indentation:-

    --> Python Multi-Line Statements:-
          - Statements in Python typically end with a new line. 
          - Python does, however, allow the use of the line continuation character (\) to denote that the line should continue. 

    --> Quotations in Python:-
          -Python accepts single ('), double (") and triple (''' or """) quotes to denote string literals, as long as the same type of quote starts and ends the string.

    --> Comments in Python:-
        - A hash sign (#) that is not inside a string literal begins a comment.
        - All characters after the # and up to the end of the physical line are part of the comment and the Python interpreter ignores them.
            - Following triple-quoted string is also ignored by Python interpreter and can be used as a multiline comments: [ '''   COMMENTS  ''']

    --> Multiple Statements on a Single Line:-
            - The semicolon ( ; ) allows multiple statements on the single line given that neither statement starts a new code block.


--> Python Variables:-
            - Variables are used to store values.
            - Variables reserve the memory locations to store the values
            - Based on the variable data type, memory will be allocated to variable.
            - Python's built-in id() function returns the address where the object is stored.
            - For eg : 
                    name="deepthi"
                    print(id(name))

            - Create python variable : you create variable and assign variable using [=] sign.
                    name="deepthi"
                    age = 30

            - Printing Python Variables: you can print variable using print()
                    print(name)

            - Deleting Python Variables:- you can delete variable using "del" keyword.
                    name="deepthi"
                    age = 30
                    print(name)
                    print(age)
                    del age
                    print(age)

            - Getting Type of a Variable: you can use " type() " to get type of variable.
                    name="deepthi"
                    age = 30
                    print(name)
                    print(age)
                    print(type(age))

                    Output : deepthi
                             30
                             <class 'int'>

            - Case-Sensitivity of Python Variables: Python variables are case sensitive which means Age and age are two different variables
            - Python Variables - Multiple Assignment: 
                    a=b=c=10
            - Python Local Variables: Python Local Variables are defined inside a function. We can not access variable outside the function.
                    def sum(x,y):
                       sum = x + y
                       return sum
                    print(sum(5, 10))

            - Python Global Variables: Any variable created outside a function can be accessed within any function and so they have global scope.
                    x = 5
                    y = 10
                    def sum():
                        sum = x + y
                        return sum
                    print(sum())

            -Constants in Python: 
                    - you can define constant by using all-caps names with underscores. 
                    - For example, the name PI_VALUE indicates that you don't want the variable redefined or changed in any way.

--> Python Operators:
            - Operators are the special symbols used to perform operations.
            --> Python Arithmetic Operators:
                    - Python Arithmetic operators are used to perform basic mathematical operations such as addition, subtraction, multiplication, etc.
                    +	Addition	2 + 3 = 5
                    -	Subtraction	2 - 3 = -1
                    *	Multiplication	2 * 3 = 6
                    /	Division	4 / 2 = 2.0
                    %	Modulus	4 % 2 = 0
                    **	Exponent	4**2 =4 power of 2 = 16
                    //	Floor Division 4 // 2 = 2

            -->Python Comparison Operators:
                    -Python Comparison operators compare the values on either side of them and decide the relation among them. 
                    - They are also called Relational operators.
                        a = 10
                        b = 20
                        if(a == b):
                            print("Line1: a is equal to b")
                        else:
                            print("Line1: a is not equal b")

                        if(a != b):
                            print("Line2: a is not equal to be")
                        else:
                            print("Line: a is equal to b")

                        if(a > b):
                            print("Line3: a is greater than b ")
                        else:
                            print("Line3: a is not greater than b")

                        if(a < b):
                            print("Line 4: a is lesser than b")
                        else:
                            print("Line 4: a is not lesser than b")

                        if(a >= b):
                            print("Line5 : a is greater than or equal to b")
                        else:
                            print("Line5: a is not greater than or equal to b")

                        if (a <=b):
                            print("Line6: a is lesser than or equal to b")
                        else:
                            print("Line6: a is not lesser than equal to b")

                --> Python Assignment Operators: Used to assign values to variable.

                        =	a = 10	a = 10
                        +=	a += 30	a = a + 30
                        -=	a -= 15	a = a - 15
                        *=	a *= 10	a = a * 10
                        /=	a /= 5	a = a / 5
                        %=	a %= 5	a = a % 5
                        **=	a **= 4	a = a ** 4
                        //=	a //= 5	a = a // 5

                --> Python Logical Operators:
                        - Python logical operators are used to combine two or more conditions and check the final result
                        - AND , OR, NOT 

--> Python - Lists :- 
                - Python list is sequence of items separated by commas, enclosed in square brackets []
                - items in List need not be of same type.
                - A list in Python is similar to an array in C, C++ or Java
                - eg:  List1 = ["Deepthi","Nagesh",30,40];

    ==> Access list Items:-
                --> Accessing Values in Lists:
                                    -List1 = [1, 2, 3, 4, 5, 6, 7 ]
                                    -print(List1[0])
                                        Output: 1
                                    - print(List1[6])       
                                        Output: 7
                                    - print(List1[-1])
                                        Output : 7
                                    - print ("list1[1:5]: ", List2[1:5])
                                        Output: list1[1:5]:[2,3,4,5]

                -->Access List Items with Slice Operator:   [start:stop] 
                                    List1 = [1, 2, 3, 4, 5, 6, 7]
                                    print("Elemented after slicing", List1[2:])

                                    -Output:Elemented after slicing [3, 4, 5, 6, 7]

                --> Access Sub List from a List : Using  [start:stop] 

                                    List1 = [1, 2, 3, 4, 5, 6, 7]
                                    print("List1", List1[2:4])
                                    
                                    -Output: List1 [3, 4]

        ==> Change List Items:

                --> Updating Lists:- Should be updated within index range
                                    List1 = [1, 2, 3, 4, 5, 6, 7]
                                    List1[6] = 9
                                    print("New value added at index 6:", List1[6])
                                    print(List1)

                                    -Output: New value added at index 6: 9
                                            1, 2, 3, 4, 5, 6, 9]

                --> Change Consecutive List Items:-
                                    List1 = [1, 2, 3, 4, 5, 6, 7]
                                    List2 =["Deepthi" , "Dheeraj"]
                                    List1[1:3] = List2
                                    print(List1)

                                    -OutPut: [1, 'Deepthi', 'Dheeraj', 4, 5, 6, 7]

        ==> Add List items:- Inserting new elements to existing list using append(), insert(),extend()

                -->Adding List Items Using append() Method:
                                    List1 = [1, 2, 3, 4, 5, 6, 7]
                                    List1.append(10)        <===== append takes only one argument
                                    print(List1)

                                    -Output:[1, 2, 3, 4, 5, 6, 7, 10]

                --> Adding List Items Using insert() Method: Used to insert elemement on specific Index by shifting existing list to accomudate new value.

                                    List1 = [1, 2, 3, 4, 5, 6, 7]
                                    List1.insert(1, "Newvalueinsertedatindex1")   <==== Take 2 arguments , first one is index and second one is value to be inserted
                                    print(List1)                  

                                    -Output: [1, 'Newvalueinsertedatindex1', 2, 3, 4, 5, 6, 7]

                --> Adding List Items Using extend() Method: Add another list2 to end of List1
                                    List1 = [1, 2, 3, 4, 5, 6, 7]
                                    List2 = [10 , 20 , 30]
                                    List1.extend(List2)
                                    print(List1)

                                    -Output: [1, 2, 3, 4, 5, 6, 7, 10, 20, 30]
                            
        ===> Remove List Items:- you can remove list using remove() , pop() , clear()

                            -> Remove List Item Using remove() Method
                                    List1 = [1, 2, 3, 4, 5, 6, 7]
                                    List1.remove(3)      <==== you need to give element name not the index
                                    print(List1)
                                 
                                    -Output: [1, 2, 4, 5, 6, 7]

                            --> Remove List Item Using pop() Method: 

                                    List1 = [10, 20, 30, 40, 50, 60, 70]
                                    List1.pop(5)        <===== you need to give the index 
                                    print(List1)

                                    -Output: [10, 20, 30, 40, 50, 70]

                            ---> Remove List Item Using clear() Method

                                    List1 = [10, 20, 30, 40, 50, 60, 70]
                                    List1.clear()
                                    print(List1)

                                    -Output:  []

                --> Delete List Elements: To delete element from List , you can use "del" or "remove()"  method.
                                    List1 = [1, 2, 3, 4, 5, 6, 7]
                                    print("elemented deleted at index 2", List1[2])
                                    del List1[2]
                                    print(List1)

                                    Output:
                                    elemented deleted at index 2 3
                                    [1, 2, 4, 5, 6, 7]

        ==> Loop Through List Items : >
                --> Loop Through List Items with "For" Loop :  < Loop exist after the range is completed >
                                    List1 = [10, 20, 30, 40, 50, 60, 70]   
                                    for list in List1:
                                        print("Looping over List1:",list)

                                    Output: 
                                    Looping over List1: 10
                                    Looping over List1: 20
                                    Looping over List1: 30
                                    Looping over List1: 40
                                    Looping over List1: 50
                                    Looping over List1: 60
                                    Looping over List1: 70

                --> Loop Through List Items with While Loop:  < Loop exist when condition is true>

                                    count = 1
                                    while count <= 5:
                                        print("Count is:", count)
                                        count += 1
                                    print("Finished!")

                --> Loop Through List Items with Index : find the length of List then loop through indices

                                    lst = [25, 12, 10, -21, 10, 100]
                                    Indices = range(len(lst))
                                    print(Indices)
                                    for i in Indices:
                                        print("List[{}]".format(i),lst[i])

                                    Output: range(0, 6)
                                    List[0] 25
                                    List[1] 12
                                    List[2] 10
                                    List[3] -21
                                    List[4] 10
                                    List[5] 100



                                


                        
                            












